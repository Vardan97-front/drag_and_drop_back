let createError,express,path,cookieParser,logger,compression,headers,serverHost,indexRouter;_ce8‍.x([["default",()=>_ce8‍.o]]);_ce8‍.w("http-errors",[["default",["createError"],function(v){createError=v}]]);_ce8‍.w("express",[["default",["express"],function(v){express=v}]]);_ce8‍.w("path",[["default",["path"],function(v){path=v}]]);_ce8‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_ce8‍.w("morgan",[["default",["logger"],function(v){logger=v}]]);_ce8‍.w("compression",[["default",["compression"],function(v){compression=v}]]);_ce8‍.w("./middlewares/headers",[["default",["headers"],function(v){headers=v}]]);_ce8‍.w("./middlewares/serverHost",[["default",["serverHost"],function(v){serverHost=v}]]);_ce8‍.w("./routes/index",[["default",["indexRouter"],function(v){indexRouter=v}]]);









const app = express();

app.use(compression());
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(headers);
app.use(serverHost);

app.use('/', indexRouter);

app.use((req, res, next) => {
  next(createError(404));
});

// eslint-disable-next-line no-unused-vars
app.use((err, req, res, next) => {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  res.status(err.status || 500);
  _ce8‍.g.console.log(err.error);
  res.json({
    status: 'error',
    message: err.message,
    stack: err.stack,
    errors: err.errors,
  });
});

_ce8‍.d(app);
