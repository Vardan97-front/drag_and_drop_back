let Debug,http,app;_a12‍.w("debug",[["default",["Debug"],function(v){Debug=v}]]);_a12‍.w("http",[["default",["http"],function(v){http=v}]]);_a12‍.w("../app",[["default",["app"],function(v){app=v}]]);





// eslint-disable-next-line no-unused-vars
const debug = Debug('server:server');

// eslint-disable-next-line no-use-before-define
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
// eslint-disable-next-line no-use-before-define
server.on('error', onError);
// eslint-disable-next-line no-use-before-define
server.on('listening', onListening);

function normalizePort(val) {
  // eslint-disable-next-line no-shadow
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ` + port
    : `Port ` + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      _a12‍.g.console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      _a12‍.g.console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
